---
import './SectionHero.scss';
import './BtnCallToAction.astro';
import BtnCallToAction from './BtnCallToAction.astro';

const peekSize = 130;
const peekTiles = Array.from({ length: peekSize });

const randOpacity = (min: number, max: number) => {
    return (Math.random() * (max-min) + min).toFixed(2);
};
---

<section class="hero" id="hero">
    <div class="deco">
        <div class="layer layer-1"></div>
        <div class="layer layer-2"></div>
    </div>
    <div class="struct">
        <div class="contents">
            <span class="counter">01 &gt;</span>
            <h1>Hello, <span class="split-line">I'm <span class="prog-tag">&#123;</span><span class="highlight">Aldreich</span><span class="prog-tag">&#125;</span>.</span></h1>
            <p>I'm a web experience creator, also known as <span class="highlight">@the13thgeek</span>!</p>
            <div class="call-to-action">
                <BtnCallToAction text="About Me" href="/about" type="primary" icon="caret-right" />
                <BtnCallToAction text="Connect" href="#connect" type="secondary" icon="caret-right" />
            </div>
        </div>
        <div class="photo">
            {peekTiles.map(() => (
                <div class="tile" style={`opacity: ${randOpacity(0.7, 0.95)}`}></div>
            ))}
        </div>
    </div>
</section>

<script>
    const tiles = document.querySelectorAll('.tile');
    const deco = document.querySelector('.deco');
    const layer1 = document.querySelector('.layer-1');
    const layer2 = document.querySelector('.layer-2');
    let maxShift1 = getMaxShift(layer1);
    let maxShift2 = getMaxShift(layer2);
    let isInside = false;

    function getMaxShift(layer: number) {
        return (layer.offsetWidth - window.innerWidth) / 2;
    }

    tiles.forEach(tile => {
        tile.addEventListener('mouseenter', () => {
            if(tile.classList.contains('effector')) return;
            tile.classList.add('effector');
            setTimeout(() => {
                tile.classList.remove('effector');
            }, 3500);
        });
    });

    deco.addEventListener('mouseenter', () => isInside = true);
    deco.addEventListener('mouseleave', () => isInside = false);

    deco?.addEventListener('mousemove', (e) => {
        if(!isInside) return;

        const rect = deco.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const percent = x / rect.width;
        const centered = percent - 0.5;
        let offset1 = centered * maxShift1 * 0.1;
        let offset2 = centered * maxShift2 * 0.2;

        offset1 = Math.max(-maxShift1, Math.min(maxShift1, offset1));
        offset2 = Math.max(-maxShift2, Math.min(maxShift2, offset2));

        layer1.style.transform = `translateX(${offset1}px)`;
        layer2.style.transform = `translateX(${offset2}px)`;
    });
    window.addEventListener('resize', () => {
        maxShift1 = getMaxShift(layer1);
        maxShift2 = getMaxShift(layer2);
    });
    
</script>